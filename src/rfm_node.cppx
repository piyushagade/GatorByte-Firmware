// Feather9x_TX
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client (transmitter)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example Feather9x_RX

#include <SPI.h>
#include <RH_RF95.h>

// First 3 here are boards w/radio BUILT-IN. Boards using FeatherWing follow.
#define RFM95_CS    7
#define RFM95_INT   A2
#define RFM95_RST   0

// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 915.0

// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS, RFM95_INT);

void setup() {
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(9600);
  // while (!Serial) delay(1);
  delay(100);

  Serial.println("Feather LoRa TX Test!");

  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    Serial.println("Uncomment '#define SERIAL_DEBUG' in RH_RF95.cpp for detailed debug info");
    while (1);
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);

  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
  // you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);
}

int16_t packetnum = 0;  // packet counter, we increment per xmission

void loop() {
  delay(1000); // Wait 1 second between transmits, could also 'sleep' here!
  Serial.println("\nTransmitting..."); // Send a message to rf95_server
  digitalWrite(LED_BUILTIN, HIGH);

  char radiopacket[512] = "^DEVICESN,TIMESTAMP,DATE,TIME,TEMP,RH,FLTP,FLTS,WLEV,BVOLT,BLEV\nnSPCEDiC,1717939836,6/9/24,13:30,31.99,51.19,0,0,1094,4.10,97.61$";

  bool endflag = false;
  uint8_t checksum = 0;
  for (int si = 0; si < sizeof(radiopacket) / sizeof(radiopacket[0]); si += 1) {
    checksum += radiopacket[si];
  }

  // Take the complement of the checksum
  checksum = ~checksum + 1;

  for (int si = 0; si < sizeof(radiopacket) / sizeof(radiopacket[0]); si += 19) {
    if (!endflag) {
      int ei = si + 19;

      char temp[20] = "";
      for (int i = 0; i < 19; i++) {
          temp[i] = radiopacket[si + i];
          if (temp[i] == '$' || (si + i >= 512)) endflag = true;
      }

      temp[19] = '\0';
      rf95.send((uint8_t *) temp, 20);
      rf95.waitPacketSent();
      delay(15);
    }
  }
  
  // Print the calculated checksum
  Serial.print("Checksum: ");
  Serial.println(checksum);
  digitalWrite(LED_BUILTIN, LOW);

  // Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);

  Serial.println("Waiting for reply...");
  if (rf95.waitAvailableTimeout(1000)) {
    // Should be a reply message for us now
    if (rf95.recv(buf, &len)) {
      Serial.print("Response: ");
      Serial.println((char*) buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);
    } else {
      Serial.println("Receive failed");
    }
  } else {
    Serial.println("No reply, is there a listener around?");
  }

}